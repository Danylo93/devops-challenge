#!/bin/bash

set -eo pipefail

echo "üîß Iniciando pipeline DevOps Challenge..."

### VARI√ÅVEIS ###
IMAGE_NAME="devops-app"
IMAGE_TAG="v1"
ACR_NAME="acrdevopschallenge"
ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"
AKS_NAME="aksdevopschallenge"
RG_NAME="rg-devops"
LOCAL_PORT=8080

### 1. Pr√©-requisitos ###
for cmd in az docker kubectl helm terraform; do
  if ! command -v $cmd &>/dev/null; then
    echo "‚ùå Comando '$cmd' n√£o encontrado. Instale antes de continuar."
    exit 1
  fi
done

### 2. Build da imagem Docker ###
echo "üê≥ Buildando imagem $IMAGE_NAME:$IMAGE_TAG"
cd app
docker build -t $IMAGE_NAME:$IMAGE_TAG .

# Valida√ß√£o local
docker rm -f ${IMAGE_NAME}-container >/dev/null 2>&1 || true
docker run -d -p ${LOCAL_PORT}:3000 --name ${IMAGE_NAME}-container $IMAGE_NAME:$IMAGE_TAG
sleep 5
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${LOCAL_PORT})
docker rm -f ${IMAGE_NAME}-container
cd ..
[[ "$HTTP_CODE" == "200" ]] && echo "‚úÖ P√°gina local OK" || { echo "‚ùå P√°gina local falhou (HTTP $HTTP_CODE)"; exit 1; }

### 3. Envio para o ACR ###
echo "üîê Logando no ACR e enviando imagem..."
az acr login --name $ACR_NAME
docker tag $IMAGE_NAME:$IMAGE_TAG $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG
docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG
echo "‚úÖ Imagem enviada para $ACR_LOGIN_SERVER/$IMAGE_NAME:$IMAGE_TAG"

### 4. Infra com Terraform ###
echo "üåç Infraestrutura com Terraform"
cd terraform
terraform init -input=false
terraform validate
terraform plan -out=tfplan || true

# Importar RG caso j√° exista
if terraform plan -out=tfplan | grep -q "already exists"; then
  echo "‚ö†Ô∏è Importando resource group existente..."
  terraform import azurerm_resource_group.rg /subscriptions/$(az account show --query id -o tsv)/resourceGroups/$RG_NAME
fi

terraform apply -auto-approve tfplan
cd ..

### 5. Role AcrPull (garantir) ###
echo "üîë Garantindo permiss√£o de pull no ACR para o AKS..."
AKS_PRINCIPAL_ID=$(az aks show -g $RG_NAME -n $AKS_NAME --query "identity.principalId" -o tsv)
ACR_ID=$(az acr show --name $ACR_NAME --query id -o tsv)
az role assignment create --assignee "$AKS_PRINCIPAL_ID" --role "AcrPull" --scope "$ACR_ID" || true

### 6. Deploy com Helm ###
echo "‚õµ Deploy com Helm"
az aks get-credentials --resource-group $RG_NAME --name $AKS_NAME --overwrite-existing
helm lint ./helm
helm upgrade --install $IMAGE_NAME ./helm \
  --set image.repository=$ACR_LOGIN_SERVER/$IMAGE_NAME \
  --set image.tag=$IMAGE_TAG \
  --set image.pullPolicy=Always \
  --wait --timeout 5m || {
    echo "‚ö†Ô∏è Retry do Helm ap√≥s 10 segundos..."
    sleep 10
    helm upgrade --install $IMAGE_NAME ./helm \
      --set image.repository=$ACR_LOGIN_SERVER/$IMAGE_NAME \
      --set image.tag=$IMAGE_TAG \
      --set image.pullPolicy=Always \
      --wait --timeout 5m
  }

### 7. For√ßar novos pods para pegar imagem ###
echo "‚ôªÔ∏è Deletando pods antigos para for√ßar novo pull"
kubectl delete pod -l app=$IMAGE_NAME || true
sleep 10

### 8. Verifica√ß√£o final ###
echo "üîç Verificando pods e IP externo..."
kubectl rollout status deployment/$IMAGE_NAME
kubectl get pods -l app=$IMAGE_NAME

EXTERNAL_IP=""
for i in {1..10}; do
  EXTERNAL_IP=$(kubectl get svc $IMAGE_NAME -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
  [[ -n "$EXTERNAL_IP" ]] && break
  echo "‚åõ Aguardando IP externo... [$i/10]"
  sleep 10
done

if [[ -n "$EXTERNAL_IP" ]]; then
  echo "üåç Aplica√ß√£o dispon√≠vel em: http://$EXTERNAL_IP"
  if which xdg-open >/dev/null; then xdg-open http://$EXTERNAL_IP; fi
else
  echo "‚ö†Ô∏è IP externo n√£o dispon√≠vel ainda. Verifique o servi√ßo:"
  kubectl get svc $IMAGE_NAME
fi

echo "‚úÖ Pipeline finalizada com sucesso!"
